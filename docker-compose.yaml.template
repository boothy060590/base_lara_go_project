version: "3.9"

# Import Sentry infrastructure services
include:
  - docker/sentry/docker-compose.yml

services:
  nginx:
    container_name: nginx
    image: nginxproxy/nginx-proxy:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./docker/ssl/certs:/etc/nginx/certs:ro
  api:
    build:
      context: ./api
      dockerfile: ../docker/api/Dockerfile
    volumes:
      - ./api:/usr/src/app
    env_file:
      - ./api/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      nginx:
        condition: service_started
      dnsmasq:
        condition: service_started
    environment:
      - VIRTUAL_HOST=api.{{APP_DOMAIN}}
      - VIRTUAL_PORT=8080
      - HTTPS_METHOD=static
    networks:
      default:
        aliases:
          - api.{{APP_DOMAIN}}
  worker:
    build:
      context: ./api
      dockerfile: ../docker/worker/Dockerfile
    volumes:
      - ./api:/usr/src/app
    env_file:
      - ./api/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      elasticmq:
        condition: service_started
      dnsmasq:
        condition: service_started
    environment:
      - VIRTUAL_HOST=worker.{{APP_DOMAIN}}
      - VIRTUAL_PORT=8081
      - HTTPS_METHOD=static
    networks:
      default:
        aliases:
          - worker.{{APP_DOMAIN}}
    restart: unless-stopped
  api-nginx:
    image: nginx:alpine
    volumes:
      - ./docker/api/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./api:/usr/src/app
      - ./docker/ssl/certs:/etc/nginx/certs:ro
    depends_on:
      - api
    environment:
      - VIRTUAL_HOST=api.{{APP_DOMAIN}}
      - VIRTUAL_PORT=8080
      - HTTPS_METHOD=static
    networks:
      default:
        aliases:
          - api.{{APP_DOMAIN}}
  app:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend/Dockerfile
    environment:
      - VIRTUAL_HOST=app.{{APP_DOMAIN}}
      - VIRTUAL_PORT=5173
      - VIRTUAL_PROTO=https
      - HTTPS_METHOD=static
      - PORT=5173
    networks:
      default:
        aliases:
          - app.{{APP_DOMAIN}}
    volumes:
      - ./docker/ssl/certs:/app/certs:ro
      - ./frontend:/app
    depends_on:
      - api
      - dnsmasq
  redis:
    image: redis:alpine
    environment:
      - VIRTUAL_HOST=redis.{{APP_DOMAIN}}
      - VIRTUAL_PORT=6379
      - HTTPS_METHOD=static
    networks:
      default:
        aliases:
          - redis.{{APP_DOMAIN}}
    depends_on:
      - dnsmasq
  mailhog:
    image: jcalonso/mailhog
    environment:
      - VIRTUAL_HOST=mail.{{APP_DOMAIN}}
      - VIRTUAL_PORT=8025
      - HTTPS_METHOD=static
    networks:
      default:
        aliases:
          - mail.{{APP_DOMAIN}}
    depends_on:
      - dnsmasq
  minio:
    image: minio/minio
    ports:
      - "9002:9000"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - VIRTUAL_HOST=s3.{{APP_DOMAIN}}
      - VIRTUAL_PORT=9001
      - HTTPS_METHOD=static
    command: server /data --console-address ":9001"
    networks:
      default:
        aliases:
          - s3.{{APP_DOMAIN}}
    depends_on:
      - dnsmasq
  db:
    image: mysql
    restart: always
    env_file:
      - ./api/.env
    ports:
      - "3309:3306"
    expose:
      - 3306
    volumes:
      - ./my-db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=D3vB4s3L4r4G0!
      - MYSQL_DATABASE=dev_base_lara_go
      - MYSQL_USER=api_user
      - MYSQL_PASSWORD=b4s3L4r4G0212!
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uapi_user", "-pb4s3L4r4G0212!"]
      interval: 5s
      timeout: 5s
      retries: 10
  elasticmq:
    image: softwaremill/elasticmq
    container_name: elasticmq
    environment:
      - VIRTUAL_HOST=sqs.{{APP_DOMAIN}}
      - VIRTUAL_PORT=9325
      - HTTPS_METHOD=static
    ports:
      - "9324:9324"
    volumes:
      - ./docker/elasticmq/elasticmq.conf:/opt/elasticmq.conf
    command: ["java", "-Dconfig.file=/opt/elasticmq.conf", "-jar", "/opt/elasticmq-server.jar"]
    networks:
      default:
        aliases:
          - sqs.{{APP_DOMAIN}}
    depends_on:
      - dnsmasq
  sentry:
    image: getsentry/sentry:latest
    container_name: sentry
    depends_on:
      - sentry-postgres
      - sentry-redis
      - sentry-clickhouse
      - dnsmasq
    environment:
      - VIRTUAL_HOST=sentry.{{APP_DOMAIN}}
      - VIRTUAL_PORT=9000
      - HTTPS_METHOD=static
      - SENTRY_SU_EMAIL=admin@{{APP_DOMAIN}}
      - SENTRY_SU_PASSWORD=admin123
    env_file:
      - docker/sentry/envs/sentry.env
    command: ["run", "web"]
    entrypoint: ["/bin/bash", "/etc/sentry/create_superuser.sh"]
    volumes:
      - ./docker/sentry/create_superuser.sh:/etc/sentry/create_superuser.sh
    networks:
      default:
        aliases:
          - sentry.{{APP_DOMAIN}}
      sentry-network:
    restart: unless-stopped
  dnsmasq:
    image: 4km3/dnsmasq:latest
    container_name: dnsmasq
    networks:
      default:
        aliases:
          - dnsmasq
    ports:
      - "54:53/udp"
    volumes:
      - ./docker/dnsmasq/dnsmasq.conf:/etc/dnsmasq.conf
    restart: always

volumes:
  my-db:
    driver: local
  node_modules:

